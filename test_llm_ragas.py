import os
from dotenv import load_dotenv

import pytest
from datasets import Dataset

from langchain_openai import ChatOpenAI, OpenAIEmbeddings

from ragas import evaluate
from ragas.metrics import Faithfulness, ContextRecall, ContextPrecision

load_dotenv()
openai_api_key = os.getenv("OPENAI_API_KEY")
llm_temperature = 0.6


def test_case_1():
    embeddings = OpenAIEmbeddings(openai_api_key=openai_api_key)
    llm = ChatOpenAI(temperature=llm_temperature, openai_api_key=openai_api_key)

    data = {
        "question": [
            "what is the capital of France?"
        ],
        "ground_truth": [
            "Paris is the capital of France"
        ],
        "answer": [
            "France capital is Paris"
        ],
        "contexts": [
            ["Paris is the capital of France, the largest country of Europe with 550 000 km2 (65 millions inhabitants). Paris has 2.234 million inhabitants end 2011. She is the core of Ile de France region (12 million people)."]
        ],
        "reference": ["Paris"],
    }

    dataset = Dataset.from_dict(data)

    result = evaluate(
        dataset=dataset,
        metrics=[Faithfulness(), ContextRecall(), ContextPrecision()],
        llm=llm,
        embeddings=embeddings,
    )
    print(result)
    return result.to_pandas()

# To run the test, you can call the function:
evaluation_df_1 = test_case_1()
evaluation_df_1.to_csv("test_case_1.csv", index=False)
print(f"\nCSV saved to test_case_1.csv. Columns in CSV: {evaluation_df_1.columns.tolist()}")


def test_case_2():
    embeddings = OpenAIEmbeddings(openai_api_key=openai_api_key)
    llm = ChatOpenAI(temperature=llm_temperature, openai_api_key=openai_api_key)

    data = {
        "question": [
            "What is the favorite sport in canada?"
        ],
        "ground_truth": [
            "Canada's most popular sport is Ice Hockey"
        ],
        "answer": [
            "Hockey"
        ],
        "contexts": [
            ["Canada's most popular sport is ice hockey. It's officially recognized as the national winter sport and is widely viewed as a cultural icon in the country. Survey data from The Logit Group indicates that hockey is the favourite sport to watch for Canadians, with around 22% of respondents naming it as their preferred sport."]
        ],
        "reference": ["Ice Hockey"],
    }

    dataset = Dataset.from_dict(data)

    result = evaluate(
        dataset=dataset,
        metrics=[Faithfulness(), ContextRecall(), ContextPrecision()],
        llm=llm,
        embeddings=embeddings,
    )
    print(result)
    return result.to_pandas()


evaluation_df_2 = test_case_2()
evaluation_df_2.to_csv("test_case_2.csv", index=False)
print(f"\nCSV saved to test_case_2.csv. Columns in CSV: {evaluation_df_2.columns.tolist()}")


def test_case_3():
    embeddings = OpenAIEmbeddings(openai_api_key=openai_api_key)
    llm = ChatOpenAI(temperature=llm_temperature, openai_api_key=openai_api_key)

    data = {
        "question": [
            "what is the capital of France?"
        ],
        "ground_truth": [
            "Paris is the capital of France"
        ],
        "answer": [
            "France capital is Poland"
        ],
        "contexts": [
            ["Paris is the capital of France, the largest country of Europe with 550 000 km2 (65 millions inhabitants). Paris has 2.234 million inhabitants end 2011. She is the core of Ile de France region (12 million people)."]
        ],
        "reference": ["Poland"],
    }

    dataset = Dataset.from_dict(data)

    result = evaluate(
        dataset=dataset,
        metrics=[Faithfulness(), ContextRecall(), ContextPrecision()],
        llm=llm,
        embeddings=embeddings,
    )
    
    print("Ragas evaluation result (summary):")
    print(result) # This prints the aggregated scores

    evaluation_df = result.to_pandas()
    print("\nDataFrame generated by result.to_pandas():")
    print(evaluation_df) # This prints the DataFrame with all columns including metrics

    return evaluation_df

# To run the test, you can call the function:
evaluation_df_3 = test_case_3()

# Now, save it to CSV
evaluation_df_3.to_csv("test_case_3.csv", index=False)

print(f"\nCSV saved to test_case_3.csv. Columns in CSV: {evaluation_df_3.columns.tolist()}")